/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IContractRegistryInterface extends Interface {
  getFunction(nameOrSignature: "register"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;

  encodeFunctionData(
    functionFragment: "register",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
}

export namespace RegisteredEvent {
  export type InputTuple = [
    id: BytesLike,
    addr: AddressLike,
    kind: BytesLike,
    factory: AddressLike,
    salt: BytesLike,
    initCodeHash: BytesLike,
    version: BigNumberish,
    label: string,
    uri: string
  ];
  export type OutputTuple = [
    id: string,
    addr: string,
    kind: string,
    factory: string,
    salt: string,
    initCodeHash: string,
    version: bigint,
    label: string,
    uri: string
  ];
  export interface OutputObject {
    id: string;
    addr: string;
    kind: string;
    factory: string;
    salt: string;
    initCodeHash: string;
    version: bigint;
    label: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IContractRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IContractRegistry;
  waitForDeployment(): Promise<this>;

  interface: IContractRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  register: TypedContractMethod<
    [
      addr: AddressLike,
      kind: BytesLike,
      factory: AddressLike,
      salt: BytesLike,
      initCodeHash: BytesLike,
      version: BigNumberish,
      label: string,
      uri: string
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      addr: AddressLike,
      kind: BytesLike,
      factory: AddressLike,
      salt: BytesLike,
      initCodeHash: BytesLike,
      version: BigNumberish,
      label: string,
      uri: string
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;

  filters: {
    "Registered(bytes32,address,bytes32,address,bytes32,bytes32,uint64,string,string)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
  };
}
