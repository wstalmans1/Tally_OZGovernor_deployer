/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ContractRegistry {
  export type StoreStruct = {
    addr: AddressLike;
    kind: BytesLike;
    factory: AddressLike;
    salt: BytesLike;
    initCodeHash: BytesLike;
    version: BigNumberish;
    createdAt: BigNumberish;
    deprecated: boolean;
    label: string;
    uri: string;
  };

  export type StoreStructOutput = [
    addr: string,
    kind: string,
    factory: string,
    salt: string,
    initCodeHash: string,
    version: bigint,
    createdAt: bigint,
    deprecated: boolean,
    label: string,
    uri: string
  ] & {
    addr: string;
    kind: string;
    factory: string;
    salt: string;
    initCodeHash: string;
    version: bigint;
    createdAt: bigint;
    deprecated: boolean;
    label: string;
    uri: string;
  };
}

export interface ContractRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "REGISTRAR_ROLE"
      | "byId"
      | "byKind"
      | "bySalt"
      | "getByAddress"
      | "getBySalt"
      | "getLatest"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "latestByKind"
      | "listByKind"
      | "register"
      | "renounceRole"
      | "revokeRole"
      | "setDeprecated"
      | "supportsInterface"
      | "updateLabel"
      | "updateURI"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deprecated"
      | "Registered"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "UpdatedLabel"
      | "UpdatedURI"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRAR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "byId", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "byKind",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bySalt", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBySalt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestByKind",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listByKind",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeprecated",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLabel",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateURI",
    values: [AddressLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRAR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "byId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "byKind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bySalt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBySalt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLatest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestByKind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listByKind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateURI", data: BytesLike): Result;
}

export namespace DeprecatedEvent {
  export type InputTuple = [id: BytesLike, deprecated: boolean];
  export type OutputTuple = [id: string, deprecated: boolean];
  export interface OutputObject {
    id: string;
    deprecated: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredEvent {
  export type InputTuple = [
    id: BytesLike,
    addr: AddressLike,
    kind: BytesLike,
    factory: AddressLike,
    salt: BytesLike,
    initCodeHash: BytesLike,
    version: BigNumberish,
    label: string,
    uri: string
  ];
  export type OutputTuple = [
    id: string,
    addr: string,
    kind: string,
    factory: string,
    salt: string,
    initCodeHash: string,
    version: bigint,
    label: string,
    uri: string
  ];
  export interface OutputObject {
    id: string;
    addr: string;
    kind: string;
    factory: string;
    salt: string;
    initCodeHash: string;
    version: bigint;
    label: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedLabelEvent {
  export type InputTuple = [id: BytesLike, newLabel: string];
  export type OutputTuple = [id: string, newLabel: string];
  export interface OutputObject {
    id: string;
    newLabel: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedURIEvent {
  export type InputTuple = [id: BytesLike, newURI: string];
  export type OutputTuple = [id: string, newURI: string];
  export interface OutputObject {
    id: string;
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ContractRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ContractRegistry;
  waitForDeployment(): Promise<this>;

  interface: ContractRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  REGISTRAR_ROLE: TypedContractMethod<[], [string], "view">;

  byId: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        string,
        string
      ] & {
        addr: string;
        kind: string;
        factory: string;
        salt: string;
        initCodeHash: string;
        version: bigint;
        createdAt: bigint;
        deprecated: boolean;
        label: string;
        uri: string;
      }
    ],
    "view"
  >;

  byKind: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  bySalt: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getByAddress: TypedContractMethod<
    [addr: AddressLike],
    [ContractRegistry.StoreStructOutput],
    "view"
  >;

  getBySalt: TypedContractMethod<[salt: BytesLike], [string], "view">;

  getLatest: TypedContractMethod<[kind: BytesLike], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  latestByKind: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  listByKind: TypedContractMethod<[kind: BytesLike], [string[]], "view">;

  register: TypedContractMethod<
    [
      addr: AddressLike,
      kind: BytesLike,
      factory: AddressLike,
      salt: BytesLike,
      initCodeHash: BytesLike,
      version: BigNumberish,
      label: string,
      uri: string
    ],
    [string],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setDeprecated: TypedContractMethod<
    [addr: AddressLike, dep: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateLabel: TypedContractMethod<
    [addr: AddressLike, newLabel: string],
    [void],
    "nonpayable"
  >;

  updateURI: TypedContractMethod<
    [addr: AddressLike, newURI: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REGISTRAR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "byId"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        string,
        string
      ] & {
        addr: string;
        kind: string;
        factory: string;
        salt: string;
        initCodeHash: string;
        version: bigint;
        createdAt: bigint;
        deprecated: boolean;
        label: string;
        uri: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "byKind"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "bySalt"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getByAddress"
  ): TypedContractMethod<
    [addr: AddressLike],
    [ContractRegistry.StoreStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBySalt"
  ): TypedContractMethod<[salt: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getLatest"
  ): TypedContractMethod<[kind: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestByKind"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "listByKind"
  ): TypedContractMethod<[kind: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      addr: AddressLike,
      kind: BytesLike,
      factory: AddressLike,
      salt: BytesLike,
      initCodeHash: BytesLike,
      version: BigNumberish,
      label: string,
      uri: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDeprecated"
  ): TypedContractMethod<
    [addr: AddressLike, dep: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateLabel"
  ): TypedContractMethod<
    [addr: AddressLike, newLabel: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateURI"
  ): TypedContractMethod<
    [addr: AddressLike, newURI: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deprecated"
  ): TypedContractEvent<
    DeprecatedEvent.InputTuple,
    DeprecatedEvent.OutputTuple,
    DeprecatedEvent.OutputObject
  >;
  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedLabel"
  ): TypedContractEvent<
    UpdatedLabelEvent.InputTuple,
    UpdatedLabelEvent.OutputTuple,
    UpdatedLabelEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedURI"
  ): TypedContractEvent<
    UpdatedURIEvent.InputTuple,
    UpdatedURIEvent.OutputTuple,
    UpdatedURIEvent.OutputObject
  >;

  filters: {
    "Deprecated(bytes32,bool)": TypedContractEvent<
      DeprecatedEvent.InputTuple,
      DeprecatedEvent.OutputTuple,
      DeprecatedEvent.OutputObject
    >;
    Deprecated: TypedContractEvent<
      DeprecatedEvent.InputTuple,
      DeprecatedEvent.OutputTuple,
      DeprecatedEvent.OutputObject
    >;

    "Registered(bytes32,address,bytes32,address,bytes32,bytes32,uint64,string,string)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "UpdatedLabel(bytes32,string)": TypedContractEvent<
      UpdatedLabelEvent.InputTuple,
      UpdatedLabelEvent.OutputTuple,
      UpdatedLabelEvent.OutputObject
    >;
    UpdatedLabel: TypedContractEvent<
      UpdatedLabelEvent.InputTuple,
      UpdatedLabelEvent.OutputTuple,
      UpdatedLabelEvent.OutputObject
    >;

    "UpdatedURI(bytes32,string)": TypedContractEvent<
      UpdatedURIEvent.InputTuple,
      UpdatedURIEvent.OutputTuple,
      UpdatedURIEvent.OutputObject
    >;
    UpdatedURI: TypedContractEvent<
      UpdatedURIEvent.InputTuple,
      UpdatedURIEvent.OutputTuple,
      UpdatedURIEvent.OutputObject
    >;
  };
}
