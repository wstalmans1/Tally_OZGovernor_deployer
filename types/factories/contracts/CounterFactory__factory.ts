/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  CounterFactory,
  CounterFactoryInterface,
} from "../../contracts/CounterFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "timelock",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Create2EmptyBytecode",
    type: "error",
  },
  {
    inputs: [],
    name: "Create2FailedDeployment",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "Create2InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "counter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "initial",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "CounterDeployed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "initial",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "ctrOwner",
        type: "address",
      },
    ],
    name: "computeAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "initial",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "ctrOwner",
        type: "address",
      },
    ],
    name: "deployCounter",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080346100bb57601f61085338819003918201601f19168301916001600160401b038311848410176100c0578084926020946040528339810103126100bb57516001600160a01b0390818116908190036100bb5780156100a257600080546001600160a01b03198116831782556040519316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361077c90816100d78239f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe604060808152600436101561001357600080fd5b600090813560e01c8063715018a6146102dc57806377656c19146101c85780638da5cb5b146101a1578063a43a0561146100e55763f2fde38b1461005657600080fd5b346100e15760203660031901126100e1576001600160a01b0360043581811692908390036100dd576100866103cb565b82156100c6575082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b815260048101849052602490fd5b8380fd5b5080fd5b50346100e157600b9060556100f936610339565b61016c61017896939296610378926020988851946101198b820187610368565b8086526103f88b87013988518a81019182526001600160a01b03909216602082015281906040010390610154601f1992838101835282610368565b88519384916101668c840180986103a0565b906103a0565b03908101835282610368565b5190209084519185830152858201523081520160ff81532090516001600160a01b039091168152f35b50346100e157816003193601126100e157905490516001600160a01b039091168152602090f35b50346100e15790610248916101dc36610339565b9490936101e76103cb565b83516103786101f96020820183610368565b8082526103f860208301398451602081018790526001600160a01b038816604080830191909152815261025490601f1990610235606082610368565b87519586916101666020840180976103a0565b03908101855284610368565b8251156102cb5791516001600160a01b03928492f5169283156102ba5782519081526001600160a01b03949094166020808601919091529383907f662fbdb4a7657b70378e555d62643319af1822b463dad1bf6d04ec1ceeb4568a90604090a351908152f35b8251633a0ba96160e11b8152600490fd5b8451631328927760e21b8152600490fd5b82346103365780600319360112610336576102f56103cb565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b60609060031901126103635760043590602435906044356001600160a01b03811681036103635790565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761038a57604052565b634e487b7160e01b600052604160045260246000fd5b9081519160005b8381106103b8575050016000815290565b80602080928401015181850152016103a7565b6000546001600160a01b031633036103df57565b60405163118cdaa760e01b8152336004820152602490fdfe60803461007e57601f61037838819003918201601f19168301916001600160401b0383118484101761008357808492604094855283398101031261007e5780516020909101516001600160a01b038116919082900361007e57600055600180546001600160a01b0319169190911790556040516102de908161009a8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c806313af40351461022b57806315fe96dc146101bf5780633fa4f245146101a25780635524107714610144578063812600df146100c55780638da5cb5b146100985763cc718f761461006e57600080fd5b346100945760203660031901126100945760209282913581526002845220549051908152f35b8280fd5b5050346100c157816003193601126100c15760015490516001600160a01b039091168152602090f35b5080fd5b509190346100c15760203660031901126100c15782356100f060018060a01b03600154163314610299565b825481810180911161013157839450807f230c08f549f5f9e591e87490c6c26b3715ba3bdbe74477c4ec927b160763f767945582519182526020820152a180f35b634e487b7160e01b845260118552602484fd5b5034610094576020366003190112610094577f69be06033bef8d755e18606a27d6d07393aabbd1800776e503af2c8a03b7c68190359161018f60018060a01b03600154163314610299565b83548151908152836020820152a1815580f35b5050346100c157816003193601126100c157602091549051908152f35b50346100945781600319360112610094577f3bd36e881be2a3be10640b9875f2ff900c0dbcbc48792cf6bebddf254c541ef990359160243561020c60018060a01b03600154163314610299565b838552600260205281852090808254925582519182526020820152a280f35b8382346100c15760203660031901126100c157356001600160a01b03818116918290036100945781600154918216610264813314610299565b7fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c8580a36001600160a01b0319161760015580f35b156102a057565b60405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b6044820152606490fdfea164736f6c6343000818000aa164736f6c6343000818000a";

type CounterFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CounterFactory__factory extends ContractFactory {
  constructor(...args: CounterFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    timelock: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(timelock, overrides || {});
  }
  override deploy(
    timelock: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(timelock, overrides || {}) as Promise<
      CounterFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CounterFactory__factory {
    return super.connect(runner) as CounterFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterFactoryInterface {
    return new Interface(_abi) as CounterFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CounterFactory {
    return new Contract(address, _abi, runner) as unknown as CounterFactory;
  }
}
