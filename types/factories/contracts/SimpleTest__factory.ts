/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SimpleTest,
  SimpleTestInterface,
} from "../../contracts/SimpleTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "initcode",
        type: "bytes",
      },
    ],
    name: "testCreate",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d58061001f6000396000f3fe608060405260043610601c5760003560e01c80633953736c146021575b600080fd5b6030602c366004605b565b604c565b6040516001600160a01b03909116815260200160405180910390f35b600080828434f0949350505050565b60008060208385031215606d57600080fd5b823567ffffffffffffffff80821115608457600080fd5b818501915085601f830112609757600080fd5b81358181111560a557600080fd5b86602082850101111560b657600080fd5b6020929092019691955090935050505056fea164736f6c6343000818000a";

type SimpleTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleTest__factory extends ContractFactory {
  constructor(...args: SimpleTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SimpleTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleTest__factory {
    return super.connect(runner) as SimpleTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleTestInterface {
    return new Interface(_abi) as SimpleTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SimpleTest {
    return new Contract(address, _abi, runner) as unknown as SimpleTest;
  }
}
